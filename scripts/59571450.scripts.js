"use strict";angular.module("webappApp",["ngCookies","ngResource","ngSanitize","ngRoute","mobile-angular-ui","mobile-angular-ui.touch","mobile-angular-ui.scrollable","gapi.client"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/root.html"}).when("/dataset/:sheetId",{templateUrl:"views/dataset.html",controller:"DatasetCtrl"}).when("/datasets",{templateUrl:"views/datasetlist.html",controller:"DatasetListCtrl",active:"datasets"}).otherwise({redirectTo:"/"});var b=document.URL.split("#")[0];"/"===b[b.length-1]&&(b=b.substr(0,b.length-1))}]),angular.module("webappApp").controller("DatasetCtrl",["$scope","$routeParams","$http","$document","$q","gapi",function(a,b,c,d,e,f){var g=864e5;if(a.loaded=!1,a.loading=!1,b.sheetId){var h=function(a){var b=e.defer();return console.log("verifying against drive API"),f.load("drive","v2").then(function(c){c.files.get({fileId:a}).then(function(a){var c=!1;return angular.forEach(a.properties,function(a){"weightyVersion"===a.key&&"2"===a.value&&(c=!0)}),c?void b.resolve(a):(console.log("Drive file did not have expected property"),void b.reject(a.properties))},function(a){console.log("Error verifying table via drive Api:",a),b.reject(a)})}),b.promise},i=function(a){var b=e.defer();return console.log("verifying againset fusiontables API"),f.load("fusiontables","v1").then(function(c){c.table.get({tableId:a}).then(function(a){var c=!1,d=!1;angular.forEach(a.columns,function(a){"Weight"===a.name&&"NUMBER"===a.type?c=!0:"Timestamp"===a.name&&"NUMBER"===a.type&&(d=!0)}),c&&d?b.resolve(a):(console.log("Error verifying table via fusiontables API; incorrect columns"),b.reject(a.columns))},function(a){console.log("Error verifying table via fusiontables Api:",a),b.reject(a)})}),b.promise};a.$watch("isSignedIn",function(){if(a.datasetId=null,a.isSignedIn){var c=b.sheetId;e.all({drive:h(c),fusiontables:i(c)}).then(function(b){return b.drive&&b.fusiontables&&b.drive.id===b.fusiontables.tableId?(console.log("dataset id is verified"),a.datasetId=b.drive.id,void(a.name=b.drive.title)):void console.log("dataset id failed verification")},function(a){console.log("dataset id failed verification:",a)})}}),a.$watch("datasetId",function(){a.refresh()}),a.refresh=function(){console.log("Refreshing dataset",a.datasetId),a.datasetId&&f.load("fusiontables","v1").then(function(b){b.query.sqlGet({sql:"SELECT Timestamp, Weight FROM "+a.datasetId+" ORDER BY Timestamp"}).then(function(b){a.weights=[],angular.forEach(b.rows,function(b){a.weights.push({timestamp:b[0],weight:b[1],date:new Date(b[0])})}),a.loaded=!0},function(a){console.log("Dataset fetch failed:",a)})})},a.$watch("weights",function(){if(a.goal=[],a.weights&&0!==a.weights.length){a.targetDate=new Date(a.weights[0].date.getTime()+100*g),a.targetWeight=100,a.startWeight=a.weights[0].weight,a.currentWeight=a.weights[a.weights.length-1].weight,a.progress=1-(a.currentWeight-a.targetWeight)/(a.startWeight-a.targetWeight);for(var b=a.weights[0].date.getTime(),c=a.targetDate.getTime(),d=Math.log(a.startWeight),e=Math.log(a.targetWeight),f=b;c>=f;f+=Math.min(g,(c-b)/100)){var h=(f-b)/(c-b);a.goal.push({date:new Date(f),weight:Math.exp(h*e+(1-h)*d)})}}})}}]),angular.module("webappApp").filter("weight",function(){return function(a){return a+"kg"}}),angular.module("webappApp").directive("waWeightGraph",function(){var a="#428bca",b="#5cb85c";return{template:"",restrict:"E",scope:{weights:"=weights",goal:"=goal"},link:function(c,d){var e=nv.models.lineChart().margin({left:50}).useInteractiveGuideline(!0).transitionDuration(350).showXAxis(!0).showYAxis(!0);e.xAxis.axisLabel("Date").showMaxMin(!1).tickFormat(function(a){return d3.time.format("%e %b %Y")(new Date(a))}),e.yAxis.axisLabel("Weight / kg").tickFormat(function(a){return d3.format(".0f")(a)+" kg"});var f=d3.select(d[0]).append("svg");nv.utils.windowResize(function(){e.update()});var g=function(){var d,g,h=[],i=[];for(g in c.weights)d=c.weights[g],h.push({x:d.date,y:d.weight});for(g in c.goal)d=c.goal[g],i.push({x:d.date,y:d.weight});f.datum([{values:i,key:"goal",color:b},{values:h,key:"weight",color:a}]).call(e)};c.$watch("weights",g),c.$watch("goal",g)}}}),angular.module("webappApp").directive("waProgressBar",function(){return{restrict:"E",templateUrl:"waprogressbar.html",scope:{min:"@",max:"@",value:"@"}}}),angular.module("webappApp").directive("waNav",function(){return{templateUrl:"wanav.html",restrict:"E"}}),angular.module("webappApp").controller("DatasetListCtrl",["$scope","$location","$window","gapi",function(a,b,c,d){a.items=[],a.$watch("isSignedIn",function(){a.refreshList()}),a.refreshList=function(){a.items=[],console.log("Searching for weighty files..."),d.load("drive","v2").then(function(b){b.files.list({q:"not trashed and properties has { key = 'weightyVersion' and value='2' and visibility='PUBLIC'}"}).then(function(b){"drive#fileList"===b.kind&&(console.log("dataset list",b),a.items=[],angular.forEach(b.items,function(b){a.items.push({title:b.title,id:b.id,createdDate:Date.parse(b.createdDate),modifiedDate:Date.parse(b.modifiedDate)})}))})})},a.submitNewDataset=function(){a.create(a.newDataset.name),a.newDataset.name=null},a.create=function(b){b&&""!==b&&d.load("fusiontables","v1").then(function(c){c.table.insert({resource:{name:b,columns:[{columnId:0,name:"Timestamp",type:"NUMBER"},{columnId:1,name:"Weight",type:"NUMBER"}],isExportable:!0,description:"weighty record"}}).then(function(b){console.log("New dataset created",b),console.log("Setting properties..."),d.load("drive","v2").then(function(c){c.files.update({fileId:b.tableId,resource:{properties:[{key:"weightyVersion",value:2,visibility:"PUBLIC"}]}}).then(function(b){console.log("Set properties on new dataset",b),a.refreshList()},function(a){console.log("Error setting properties on new dataset",a)})})},function(a){console.log("Error creating table",a)})})}}]),angular.module("webappApp").directive("waSidebar",function(){return{templateUrl:"partials/sidebar.html",restrict:"E"}}),angular.module("webappApp").run(["gapi",function(a){a.ready()}]).controller("GoogleAccountCtrl",["$scope","$window","gapi",function(a,b,c){a.accessToken=null,a.accessTokenExpiry=null,a.isSignedIn=!1;var d={client_id:"266506267940-nk8rt8rdrpb8l5j098ugl2v04m6evujn.apps.googleusercontent.com",scope:["https://www.googleapis.com/auth/plus.me","https://www.googleapis.com/auth/drive","https://www.googleapis.com/auth/fusiontables"]};a.doLogin=function(e){e=angular.extend(e||{},d),c.auth.authorize(e).then(function(c){console.log("Authorization token obtained:",c),a.accessToken=b.gapi.auth.getToken(),a.accessTokenExpiry=new Date(Date.now()+1e3*c.expires_in),a.isSignedIn=!0},function(){console.log("Obtaining authorisation failed"),a.accessToken=null,a.accessTokenExpiry=null,a.isSignedIn=!1})},a.doLogout=function(){a.accessToken=null,a.accessTokenExpiry=null,a.isSignedIn=!1,b.gapi.auth.setToken(null)},c.ready(function(){console.log("Perfoming initial immediate-mode login attempt"),a.doLogin({immediate:!0})}),c.load("plus","v1").then(function(b){a.$watch("isSignedIn",function(){return console.log("Signed in state changed:",a.isSignedIn),a.isSignedIn?(console.log('Asking for "me"'),void b.people.get({userId:"me"}).then(function(b){console.log('Response from asking for "me"',b),a.me=b.kind&&"plus#person"===b.kind?b:null})):void(a.me=null)})})}]);