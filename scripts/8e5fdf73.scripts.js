"use strict";angular.module("webappApp",["ngCookies","ngResource","ngSanitize","ngRoute","mobile-angular-ui","mobile-angular-ui.touch","mobile-angular-ui.scrollable","gapi.client"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/root.html"}).when("/dataset/:sheetId",{templateUrl:"views/dataset.html",controller:"DatasetCtrl"}).when("/datasets",{templateUrl:"views/datasetlist.html",controller:"DatasetListCtrl",active:"datasets"}).otherwise({redirectTo:"/"});var b=document.URL.split("#")[0];"/"===b[b.length-1]&&(b=b.substr(0,b.length-1))}]),angular.module("webappApp").controller("DatasetCtrl",["$scope","$routeParams","$log","dataset",function(a,b,c,d){var e=864e5;a.loading=!1,b.sheetId&&(a.submitNewMeasurement=function(b){a.verifiedDatasetId&&(c.info("got new measurement:",b.weight),d.addRow({id:a.verifiedDatasetId,timestamp:Date.now(),weight:b.weight}).then(function(){c.info("new measurement added"),a.reloadDataset()},function(a){c.error("error adding new measurement",a)}))},a.reloadDataset=function(){return c.info("(Re-)loading dataset",a.verifiedDatasetId),a.verifiedDatasetId?(a.loading=!0,void d.get(a.verifiedDatasetId).then(function(b){a.weights=b,a.loading=!1},function(a){c.error("Could not get dataset:",a)})):void(a.weights=[])},a.$watch("isSignedIn",function(){return a.isSignedIn?(a.loading=!0,void d.verifyDatasetId(b.sheetId).then(function(b){c.info("dataset id "+b.id+" has been verified"),a.verifiedDatasetId=b.id,a.name=b.title},function(b){c.error("Dataset failed verification:",b),a.loading=!1})):void(a.verifiedDatasetId=null)}),a.$watch("verifiedDatasetId",function(){a.reloadDataset()}),a.$watch("weights",function(){if(c.info("new weights available"),a.goal=[],a.weights&&0!==a.weights.length){a.targetDate=new Date(a.weights[0].date.getTime()+100*e),a.targetWeight=100,a.startWeight=a.weights[0].weight,a.currentWeight=a.weights[a.weights.length-1].weight,a.progress=1-(a.currentWeight-a.targetWeight)/(a.startWeight-a.targetWeight);for(var b=a.weights[0].date.getTime(),d=a.targetDate.getTime(),f=Math.log(a.startWeight),g=Math.log(a.targetWeight),h=b;d>=h;h+=Math.min(e,(d-b)/100)){var i=(h-b)/(d-b);a.goal.push({date:new Date(h),weight:Math.exp(i*g+(1-i)*f)})}}}))}]),angular.module("webappApp").controller("DatasetListCtrl",["$scope","$log","$location","$window","gapi","dataset",function(a,b,c,d,e,f){a.$watch("isSignedIn",function(){a.isSignedIn?a.refreshList():a.datasets=[]}),a.refreshList=function(){b.info("refeshing dataset list"),f.list().then(function(b){a.datasets=b},function(a){b.error("could not get dataset list:",a)})},a.submitNewDataset=function(){a.create(a.newDataset.name),a.newDataset.name=null},a.create=function(c){c&&""!==c&&f.insert({title:c}).then(function(c){b.info("new dataset created"),a.datasets.push(c)},function(a){b.error("error creating dataset:",a)})}}]),window.onGapiLoad=function(){window.gapiLoaded=!0,window.handleGapiLoad&&window.handleGapiLoad()},angular.module("webappApp").run(["$window","$log","$rootScope","gapi",function(a,b,c,d){a.gapiLoaded?(b.info("gapi was already loaded by module initialisation"),d.ready()):(b.info("gapi not yet loaded, setting event handler"),a.handleGapiLoad=function(){b.info("gapi loaded"),d.ready()})}]).controller("GoogleAccountCtrl",["$scope","$window","gapi",function(a,b,c){a.accessToken=null,a.accessTokenExpiry=null,a.isSignedIn=!1;var d={client_id:"266506267940-nk8rt8rdrpb8l5j098ugl2v04m6evujn.apps.googleusercontent.com",scope:["https://www.googleapis.com/auth/plus.me","https://www.googleapis.com/auth/drive","https://www.googleapis.com/auth/fusiontables"]};a.doLogin=function(e){e=angular.extend(e||{},d),c.auth.authorize(e).then(function(c){console.log("Authorization token obtained:",c),a.accessToken=b.gapi.auth.getToken(),a.accessTokenExpiry=new Date(Date.now()+1e3*c.expires_in),a.isSignedIn=!0},function(){console.log("Obtaining authorisation failed"),a.accessToken=null,a.accessTokenExpiry=null,a.isSignedIn=!1})},a.doLogout=function(){a.accessToken=null,a.accessTokenExpiry=null,a.isSignedIn=!1,b.gapi.auth.setToken(null)},c.ready(function(){console.log("Perfoming initial immediate-mode login attempt"),a.doLogin({immediate:!0})}),c.load("plus","v1").then(function(b){a.$watch("isSignedIn",function(){return console.log("Signed in state changed:",a.isSignedIn),a.isSignedIn?(console.log('Asking for "me"'),void b.people.get({userId:"me"}).then(function(b){console.log('Response from asking for "me"',b),a.me=b.kind&&"plus#person"===b.kind?b:null})):void(a.me=null)})})}]),angular.module("webappApp").directive("waNav",function(){return{templateUrl:"wanav.html",restrict:"E"}}),angular.module("webappApp").directive("waProgressBar",function(){return{restrict:"E",templateUrl:"waprogressbar.html",scope:{min:"@",max:"@",value:"@"}}}),angular.module("webappApp").directive("waSidebar",function(){return{templateUrl:"partials/sidebar.html",restrict:"E"}}),angular.module("webappApp").directive("waWeightGraph",function(){var a="#428bca",b="#5cb85c";return{template:"",restrict:"E",scope:{weights:"=weights",goal:"=goal"},link:function(c,d){var e=nv.models.lineChart().margin({left:50}).useInteractiveGuideline(!0).transitionDuration(350).showXAxis(!0).showYAxis(!0);e.xAxis.axisLabel("Date").showMaxMin(!1).tickFormat(function(a){return d3.time.format("%e %b %Y")(new Date(a))}),e.yAxis.axisLabel("Weight / kg").tickFormat(function(a){return d3.format(".0f")(a)+" kg"});var f=d3.select(d[0]).append("svg");nv.utils.windowResize(function(){e.update()});var g=function(){var d,g,h=[],i=[];for(g in c.weights)d=c.weights[g],h.push({x:d.date,y:d.weight});for(g in c.goal)d=c.goal[g],i.push({x:d.date,y:d.weight});f.datum([{values:i,key:"goal",color:b},{values:h,key:"weight",color:a}]).call(e)};c.$watch("weights",g),c.$watch("goal",g)}}}),angular.module("webappApp").filter("weight",function(){return function(a){return a+"kg"}}),angular.module("webappApp").service("dataset",["$log","$q","$window","gapi",function(a,b,c,d){this.insert=function(c){return c&&c.title?d.load("fusiontables","v1").then(function(b){return a.info('creating new fusiontable "'+c.title+'"...'),b.table.insert({resource:{name:c.title,columns:[{columnId:0,name:"Timestamp",type:"NUMBER"},{columnId:1,name:"Weight",type:"NUMBER"}],isExportable:!0,description:"weighty record"}}).then(function(b){return a.info('setting drive properties on "'+c.title+'"'),d.load("drive","v2").then(function(a){return a.files.update({fileId:b.tableId,resource:{properties:[{key:"weightyVersion",value:2,visibility:"PUBLIC"},{key:"weightyMetadata",value:JSON.stringify(c.metadata||{}),visibility:"PUBLIC"}]}}).then(function(a){return e(a)})})})}):b.reject("passed null parameters or a falsy title")},this.addRow=function(a){var d=a.timestamp+","+a.weight;return b.when(c.gapi.client.request({path:"upload/fusiontables/v1/tables/"+a.id+"/import",method:"POST",params:{uploadType:"media",delimiter:","},headers:{"Content-Type":"application/octet-stream"},body:d}))},this.list=function(){var a="not trashed and properties has { key = 'weightyVersion' and value = '2' and visibility='PUBLIC'}";return d.load("drive","v2").then(function(b){return b.files.list({q:a}).then(function(a){if("drive#fileList"===a.kind){var b=[];return angular.forEach(a.items,function(a){b.push(e(a))}),b}})})},this.verifyDatasetId=function(a){return b.all({driveFile:f(a),fusiontablesTable:g(a)}).then(function(a){return a.driveFile?a.fusiontablesTable?a.driveFile.id!==a.fusiontablesTable.tableId?b.reject("Dataset id is different between drive and fusiontables API"):e(a.driveFile):b.reject("Dataset id does not validate via the fusiontables API"):b.reject("Dataset id does not validate via the drive API")})},this.get=function(a){return a?d.load("fusiontables","v1").then(function(b){return b.query.sqlGet({sql:"SELECT Timestamp, Weight FROM "+a+" ORDER BY Timestamp"}).then(function(a){var b=[];return angular.forEach(a.rows,function(a){b.push({timestamp:a[0],weight:a[1],date:new Date(a[0])})}),b})}):b.reject("passed an invalid or null dataset id")};var e=function(b){var c={};return angular.forEach(b.properties,function(b){if("weightyMetadata"===b.key)try{c=JSON.parse(b.value)}catch(d){a.warn("ignoring invalid JSON in weighty metadata",d),a.warn('metadata was "'+b.value+'"')}}),{title:b.title,id:b.id,createdDate:Date.parse(b.createdDate),modifiedDate:Date.parse(b.modifiedDate),metadata:c}},f=function(c){var e=b.defer();return a.info("verifying against drive API"),d.load("drive","v2").then(function(b){b.files.get({fileId:c}).then(function(b){var c=!1;return angular.forEach(b.properties,function(a){"weightyVersion"===a.key&&"2"===a.value&&(c=!0)}),c?void e.resolve(b):(a.error("Drive file did not have expected property"),void e.reject(b.properties))},function(b){a.error("Error verifying table via drive Api:",b),e.reject(b)})}),e.promise},g=function(c){var e=b.defer();return a.info("verifying againset fusiontables API"),d.load("fusiontables","v1").then(function(b){b.table.get({tableId:c}).then(function(b){var c=!1,d=!1;angular.forEach(b.columns,function(a){"Weight"===a.name&&"NUMBER"===a.type?c=!0:"Timestamp"===a.name&&"NUMBER"===a.type&&(d=!0)}),c&&d?e.resolve(b):(a.error("Error verifying table via fusiontables API; incorrect columns"),e.reject(b.columns))},function(b){a.error("Error verifying table via fusiontables Api:",b),e.reject(b)})}),e.promise}}]);